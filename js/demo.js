// Generated by CoffeeScript 1.8.0
(function() {
  var byClass, byId, chartDiv, chartType, clear, clearCharts, clearEvoData, collectData, convertParams, create, crosshairCursor, decamelize, drawChart, evoData, fiddled, geneChartSpec, geometries, initializationParameters, loaded, madeGeneCharts, makeCharts, makeCheckbox, makeColorPicker, makeInputs, makeSlider, makeUniverse, munged, onEvent, prettyInt, regTabs, restoreAbout, setImages, sibs, start, statCollector, stop, tabClicked, tabs, text, titleize, trimData, trimNum, tryLoad, u, _ref;

  initializationParameters = {
    torus: false,
    cell: [20, 10, 50, 'scale at which universe is indexed; smaller numbers means more speed and more memory consumption'],
    pause: [10, 0, 1000, 'minimum pause between ticks'],
    maxDistance: [60, 30, 100, 'maximum distance an organism can see'],
    maxBabyTries: [10, 1, 100, 'maximum number of times an organism attempts to find a place to spawn an offspring'],
    seedCost: [0.4, 0, 5, 'the cost of trying to spawn an offspring regardless of success', true],
    groundColor: '#ffffff',
    initialCreatures: {
      stones: {
        num: [40, 0, 100]
      },
      plants: {
        num: [100, 10, 500],
        init: {
          bodyColor: '#ffcb0c',
          radius: [4, 2, 20, 'plant size']
        }
      },
      herbivores: {
        num: [8, 0, 100],
        init: {
          bodyColor: '#2b4dcb',
          radius: [5, 2, 20, 'body size']
        }
      },
      carnivores: {
        num: [40, 0, 100],
        init: {
          bodyColor: '#ec2200',
          radius: [6, 2, 20, 'body size']
        }
      }
    }
  };

  byId = function(id) {
    return document.getElementById(id);
  };

  byClass = function(cz) {
    var i, wonky, _i, _ref, _results;
    wonky = document.getElementsByClassName(cz);
    _results = [];
    for (i = _i = 0, _ref = wonky.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
      _results.push(wonky.item(i));
    }
    return _results;
  };

  onEvent = function(type, e, f, clear) {
    var name, old;
    name = 'on' + type;
    if (clear) {
      return e[name] = f;
    } else {
      old = e[name];
      if (old) {
        f = function(e) {
          f(e);
          return old(e);
        };
      }
      return e[name] = f;
    }
  };

  trimNum = function(n) {
    return parseFloat(n.toPrecision(3));
  };

  decamelize = function(str) {
    return str = str.replace(/([a-z])([A-Z])/g, function(t) {
      return t.charAt(0) + ' ' + t.charAt(1).toLowerCase();
    });
  };

  titleize = function(str) {
    return str.replace(/\b[a-z]\w*/g, function(s) {
      return s.charAt(0).toUpperCase() + s.substr(1).toLowerCase();
    });
  };

  text = function(t) {
    return document.createTextNode(t);
  };

  prettyInt = function(int) {
    return int.toLocaleString();
  };

  create = function(tag, cz, id) {
    var e;
    e = document.createElement(tag);
    if (cz != null) {
      e.setAttribute('class', cz);
    }
    if (id != null) {
      e.id = id;
    }
    return e;
  };

  chartType = 'about';

  _ref = [null, false, false, false], u = _ref[0], makeCharts = _ref[1], loaded = _ref[2], munged = _ref[3];

  convertParams = function(obj) {
    var copy, k, v;
    if (obj == null) {
      obj = initializationParameters;
    }
    copy = {};
    for (k in obj) {
      v = obj[k];
      if (v instanceof Array) {
        copy[k] = v[0];
      } else if (typeof v === 'object') {
        copy[k] = convertParams(v);
      } else {
        copy[k] = v;
      }
    }
    return copy;
  };

  makeInputs = function(obj, parent) {
    var div, h, k, v, _results;
    if (obj == null) {
      obj = initializationParameters;
    }
    if (parent == null) {
      parent = byId('options');
    }
    _results = [];
    for (k in obj) {
      v = obj[k];
      div = create('div', 'indenter');
      h = create('div', 'param-header');
      h.innerHTML = decamelize(k);
      div.appendChild(h);
      parent.appendChild(div);
      if (v instanceof Array) {
        _results.push(makeSlider(k, obj, div));
      } else if (/color/i.test(k)) {
        _results.push(makeColorPicker(k, obj, div));
      } else if (typeof v === 'boolean') {
        _results.push(makeCheckbox(k, obj, div));
      } else {
        _results.push(makeInputs(v, div));
      }
    }
    return _results;
  };

  makeColorPicker = function(label, object, parent) {
    var color, h, s, sp;
    color = object[label];
    s = create('input');
    s.type = 'color';
    s.value = color;
    h = parent.firstChild;
    h.appendChild(text(' '));
    h.appendChild(s);
    sp = create('span');
    sp.innerHTML = color;
    sp.style.fontWeight = 'normal';
    h.appendChild(text(' '));
    h.appendChild(sp);
    return s.onchange = function() {
      object[label] = s.value;
      return sp.innerHTML = s.value;
    };
  };

  makeCheckbox = function(label, obj, parent) {
    var s, value;
    value = obj[label];
    s = create('input');
    s.type = 'checkbox';
    s.checked = value;
    parent.appendChild(s);
    return s.onchange = function() {
      return obj[label] = s.checked;
    };
  };

  makeSlider = function(label, object, parent) {
    var isFloat, max, min, s, sp, title, value, values;
    values = object[label];
    s = create('input');
    s.type = 'range';
    value = values[0], min = values[1], max = values[2], title = values[3], isFloat = values[4];
    s.value = value;
    s.min = min;
    s.max = max;
    if (title) {
      s.title = title;
    }
    s.step = isFloat ? 0.1 : 1;
    sp = create('span', 'param-value');
    sp.innerHTML = values[0];
    parent.appendChild(s);
    parent.appendChild(sp);
    return s.onchange = function() {
      sp.innerHTML = s.value;
      return values[0] = Number.parseInt(s.value);
    };
  };

  madeGeneCharts = false;

  chartDiv = function(tab, id) {
    var div;
    div = create('div', 'chart', id);
    tab.appendChild(div);
    return id;
  };

  makeUniverse = function() {
    var charts, g, gene, geneSorter, id, p, tab, type, _i, _len, _ref1, _results;
    p = convertParams();
    p.callback = collectData;
    u = new dfh.Universe('universe', p);
    setImages();
    if (!madeGeneCharts) {
      _ref1 = ['plant', 'herbivore', 'carnivore'];
      _results = [];
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        type = _ref1[_i];
        tab = byId("" + type + "-chart");
        charts = evoData.charts[type] = {};
        id = chartDiv(tab, "" + type + "-babies");
        charts.babies = {
          id: id,
          type: 'interval',
          htitle: 'Time (ticks)',
          vtitle: 'Offspring per individual',
          collector: statCollector(titleize(type), function(d) {
            return d.babies;
          }),
          rows: []
        };
        id = chartDiv(tab, "" + type + "-age");
        charts.age = {
          id: id,
          type: 'interval',
          htitle: 'Time (ticks)',
          vtitle: 'Age (ticks)',
          collector: statCollector(titleize(type), function(d) {
            return u.tick - d.tick;
          }),
          rows: []
        };
        geneSorter = function(a, b) {
          var affA, affB;
          if (a === b) {
            return 0;
          }
          affA = /affinity/i.test(a);
          affB = /affinity/i.test(b);
          if (affA || affB) {
            if (affA && affB) {
              if (a < b) {
                return -1;
              } else {
                return 1;
              }
            } else {
              if (affA) {
                return 1;
              } else {
                return -1;
              }
            }
          } else {
            if (a < b) {
              return -1;
            } else {
              return 1;
            }
          }
        };
        _results.push((function() {
          var _j, _len1, _ref2, _results1;
          _ref2 = ((function() {
            var _results2;
            _results2 = [];
            for (g in u.urThing(type).genes) {
              _results2.push(g);
            }
            return _results2;
          })()).sort(geneSorter);
          _results1 = [];
          for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
            gene = _ref2[_j];
            id = chartDiv(tab, "" + type + "-" + gene);
            _results1.push(charts[gene] = geneChartSpec(type, gene, id));
          }
          return _results1;
        })());
      }
      return _results;
    }
  };

  evoData = {
    generation: 0,
    charts: {
      all: {
        Population: {
          id: 'chart',
          htitle: 'Time (ticks)',
          vtitle: 'Num. individuals',
          collector: function(stats, rows) {
            var counts, description, row, _i, _len;
            counts = {
              Plant: 0,
              Herbivore: 0,
              Carnivore: 0
            };
            for (_i = 0, _len = stats.length; _i < _len; _i++) {
              description = stats[_i];
              counts[description.type] += 1;
            }
            row = [evoData.generation, counts.Plant, counts.Herbivore, counts.Carnivore];
            return rows.push(row);
          },
          names: ['Plant', 'Herbivore', 'Carnivore'],
          colors: [
            function() {
              return u.urThing('plant').bodyColor;
            }, function() {
              return u.urThing('herbivore').bodyColor;
            }, function() {
              return u.urThing('carnivore').bodyColor;
            }
          ],
          rows: []
        },
        Energy: {
          id: 'energy',
          htitle: 'Time (ticks)',
          vtitle: 'Net energy embodied by individuals',
          collector: function(stats, rows) {
            var counts, description, row, _i, _len;
            counts = {
              Plant: 0,
              Herbivore: 0,
              Carnivore: 0
            };
            for (_i = 0, _len = stats.length; _i < _len; _i++) {
              description = stats[_i];
              counts[description.type] += description.hp;
            }
            row = [evoData.generation, counts.Plant, counts.Herbivore, counts.Carnivore];
            return rows.push(row);
          },
          names: ['Plant', 'Herbivore', 'Carnivore'],
          colors: [
            function() {
              return u.urThing('plant').bodyColor;
            }, function() {
              return u.urThing('herbivore').bodyColor;
            }, function() {
              return u.urThing('carnivore').bodyColor;
            }
          ],
          rows: []
        }
      }
    }
  };

  clearEvoData = function() {
    var rowClearer;
    evoData.generation = 0;
    rowClearer = function(obj) {
      var k, v, _results;
      if (obj == null) {
        return false;
      }
      if (obj.rows instanceof Array) {
        return obj.rows = [];
      } else {
        _results = [];
        for (k in obj) {
          v = obj[k];
          if (typeof v === 'object') {
            _results.push(rowClearer(v));
          } else {
            _results.push(void 0);
          }
        }
        return _results;
      }
    };
    return rowClearer(evoData.charts);
  };

  statCollector = function(type, selector) {
    return function(stats, rows) {
      var d, i, max, mean, median, min, v, values, _i, _j, _len, _len1, _ref1;
      values = [];
      for (_i = 0, _len = stats.length; _i < _len; _i++) {
        d = stats[_i];
        if (d.type === type) {
          values.push(selector(d));
        }
      }
      _ref1 = [0, 0, 0, 0], min = _ref1[0], max = _ref1[1], mean = _ref1[2], median = _ref1[3];
      if (values.length) {
        values.sort(function(a, b) {
          return a - b;
        });
        min = values[0];
        max = values[values.length - 1];
        for (_j = 0, _len1 = values.length; _j < _len1; _j++) {
          v = values[_j];
          mean += v;
        }
        mean /= values.length;
        if (values.length % 2) {
          median = values[Math.floor(values.length / 2)];
        } else {
          i = values.length / 2;
          median = (values[i] + values[i - 1]) / 2;
        }
        return rows.push([evoData.generation, trimNum(median), trimNum(mean), trimNum(min), trimNum(max)]);
      }
    };
  };

  geneChartSpec = function(type, gene, id) {
    var original, title;
    title = type.charAt(0).toUpperCase() + type.substr(1);
    original = u.urThing(type).genes[gene][0];
    if (typeof original === 'function') {
      original = original();
    }
    return {
      id: id,
      type: 'interval',
      htitle: 'Time (ticks)',
      vtitle: 'Value of gene',
      original: original,
      collector: statCollector(title, function(d) {
        return d.genes[gene];
      }),
      rows: []
    };
  };

  collectData = function() {
    var details, e, fiddled, specs, stats, tab, title, _i, _j, _len, _len1, _ref1, _ref2;
    evoData.generation += 1;
    byId('ticks').innerHTML = prettyInt(evoData.generation);
    byId('plant-count').innerHTML = prettyInt(u.plantCount());
    byId('animal-count').innerHTML = prettyInt(u.animalCount());
    byId('herbivore-count').innerHTML = prettyInt(u.herbivoreCount());
    byId('carnivore-count').innerHTML = prettyInt(u.carnivoreCount());
    if (loaded && !munged) {
      _ref1 = byClass('wait');
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        e = _ref1[_i];
        e.remove();
      }
      munged = true;
    }
    stats = u.describe();
    _ref2 = evoData.charts;
    for (tab in _ref2) {
      specs = _ref2[tab];
      for (title in specs) {
        details = specs[title];
        details.collector(stats, details.rows);
      }
    }
    if (loaded && (u.done || !u.running)) {
      for (_j = 0, _len1 = sibs.length; _j < _len1; _j++) {
        e = sibs[_j];
        drawChart(e.innerHTML);
      }
      if (u.done) {
        byId('start').innerHTML = 'start';
        byId('stop').style.display = 'none';
        u.prime();
        return fiddled = true;
      }
    } else if (makeCharts) {
      return drawChart();
    }
  };

  fiddled = false;

  start = function() {
    if (u && u.running) {
      u.stop();
      evoData.generation = 0;
      clearCharts();
      u.erase();
    }
    byId('stop').style.display = 'inline';
    byId('clear').style.display = 'inline';
    byId('start').innerHTML = 'restart';
    if (!fiddled) {
      makeUniverse();
    }
    fiddled = false;
    u.run();
    byId('stop').innerHTML = 'stop';
    return false;
  };

  stop = function() {
    var element;
    if (!u) {
      return;
    }
    element = byId('stop');
    if (u.running) {
      u.stop();
      element.innerHTML = 'resume';
    } else {
      u.run();
      element.innerHTML = 'stop';
    }
    return false;
  };

  clear = function() {
    var oldCallback;
    oldCallback = u.callback || function() {};
    u.callback = function() {
      var e;
      oldCallback();
      clearEvoData();
      u.stop();
      u.erase();
      makeUniverse();
      byId('stop').style.display = 'none';
      e = byId('start');
      e.style.display = 'inline';
      e.innerHTML = 'start';
      return byId('clear').style.display = 'none';
    };
    if (!u.running) {
      u.callback();
    }
    return false;
  };

  trimData = function(data, size) {
    var i, results, _i, _ref1, _ref2;
    if (data.length < size) {
      return data;
    }
    results = [];
    for (i = _i = _ref1 = data.length - size, _ref2 = data.length; _ref1 <= _ref2 ? _i < _ref2 : _i > _ref2; i = _ref1 <= _ref2 ? ++_i : --_i) {
      results.push(data[i]);
    }
    return results;
  };

  clearCharts = function() {
    var chart, id, specs, subtype, title, type, _ref1, _results;
    _ref1 = evoData.charts;
    _results = [];
    for (type in _ref1) {
      subtype = _ref1[type];
      _results.push((function() {
        var _results1;
        _results1 = [];
        for (title in subtype) {
          specs = subtype[title];
          id = specs.id;
          if (chart = specs.chart) {
            chart.clearChart();
          }
          _results1.push(specs.rows = []);
        }
        return _results1;
      })());
    }
    return _results;
  };

  drawChart = function(ct) {
    var c, chart, colors, data, delta, height, htitle, i, id, ids, n, names, options, rows, specs, title, vtitle, width, _i, _j, _k, _len, _len1, _ref1;
    if (ct == null) {
      ct = chartType;
    }
    if (ct === 'options' || ct === 'about') {
      return;
    }
    _ref1 = evoData.charts[ct] || {};
    for (title in _ref1) {
      specs = _ref1[title];
      rows = trimData(specs.rows, 500);
      if (!(rows.length && rows[0].length)) {
        return;
      }
      id = specs.id;
      chart = specs.chart;
      htitle = specs.htitle;
      vtitle = specs.vtitle;
      width = specs.width || 1000;
      height = specs.height || 400;
      data = new google.visualization.DataTable();
      data.addColumn('number', 'X');
      options = {
        title: titleize(decamelize(title)),
        width: width,
        height: height,
        hAxis: {
          title: htitle
        },
        vAxis: {
          title: vtitle
        }
      };
      if (specs.type === 'interval') {
        data.addColumn('number', 'values');
        if (specs.original != null) {
          delta = rows[rows.length - 1][1] - specs.original;
          options.title = "Gene: " + options.title + " (delta: " + (trimNum(delta)) + ")";
        }
        ids = [];
        for (i = _i = 2; _i < 5; i = ++_i) {
          data.addColumn({
            id: "i" + i,
            type: 'number',
            role: 'interval'
          });
        }
        options.interval = {
          i2: {
            style: 'line',
            color: 'green'
          },
          i3: {
            style: 'line',
            color: 'black'
          },
          i4: {
            style: 'line',
            color: 'red'
          }
        };
        options.lineWidth = 2;
        options.legend = 'none';
      } else {
        names = specs.names;
        colors = specs.colors;
        if (colors) {
          for (i = _j = 0, _len = colors.length; _j < _len; i = ++_j) {
            c = colors[i];
            if (typeof c === 'function') {
              colors[i] = c();
            }
          }
          options.colors = colors;
        }
        for (_k = 0, _len1 = names.length; _k < _len1; _k++) {
          n = names[_k];
          data.addColumn('number', n);
        }
      }
      data.addRows(rows);
      if (chart) {
        chart.clearChart();
      } else {
        specs.chart = chart = new google.visualization.LineChart(byId(id));
      }
      chart.draw(data, options);
    }
  };

  tabs = [];

  sibs = [];

  regTabs = {};

  restoreAbout = (function() {
    var c, t;
    t = byId('tabs');
    c = t.firstChild;
    while (c = c.nextSibling) {
      if (c.innerHTML === 'about') {
        break;
      }
    }
    return function() {
      return tabClicked(c);
    };
  })();

  tabClicked = function(c) {
    var content, s, t, _i, _j, _len, _len1;
    if (c.className === 'active') {
      return;
    }
    for (_i = 0, _len = sibs.length; _i < _len; _i++) {
      s = sibs[_i];
      s.classList.remove('active');
    }
    c.classList.add('active');
    for (_j = 0, _len1 = tabs.length; _j < _len1; _j++) {
      t = tabs[_j];
      t.style.display = 'none';
    }
    chartType = c.innerHTML;
    if (c.classList.contains('reg')) {
      makeCharts = false;
      content = byId(chartType);
      return content.style.display = 'table';
    } else {
      byId(chartType + '-chart').style.display = 'block';
      return tryLoad();
    }
  };

  tryLoad = function(making) {
    var e;
    if (making == null) {
      making = true;
    }
    try {
      makeCharts = making;
      if (!loaded) {
        google.load('visualization', '1', {
          packages: ['corechart']
        });
        google.setOnLoadCallback(drawChart);
        return loaded = true;
      }
    } catch (_error) {
      e = _error;
      if (!regTabs[chartType]) {
        alert("Could not make charts: " + e);
      }
      makeCharts = false;
      loaded = false;
      return restoreAbout();
    }
  };

  geometries = {};

  setImages = function() {
    var data, height, i, images, img, selector, type, width, x, y, _i, _len, _ref1, _ref2, _results;
    _ref1 = ['plant', 'stone', 'herbivore', 'carnivore'];
    _results = [];
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      type = _ref1[_i];
      selector = "img." + type;
      images = document.querySelectorAll("img." + type);
      if (images.length) {
        _ref2 = geometries[type] = u.imageFor(type), data = _ref2[0], width = _ref2[1], height = _ref2[2], x = _ref2[3], y = _ref2[4];
        _results.push((function() {
          var _j, _ref3, _results1;
          _results1 = [];
          for (i = _j = 0, _ref3 = images.length; 0 <= _ref3 ? _j < _ref3 : _j > _ref3; i = 0 <= _ref3 ? ++_j : --_j) {
            img = images[i];
            img.src = data;
            img.width = width;
            _results1.push(img.height = height);
          }
          return _results1;
        })());
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  crosshairCursor = function(color) {
    var c, ctx;
    if (color == null) {
      color = 'black';
    }
    c = create('canvas');
    c.setAttribute('width', 16);
    c.setAttribute('height', 16);
    ctx = c.getContext('2d');
    ctx.strokeStyle = color;
    ctx.beginPath();
    ctx.arc(8, 8, 6, 0, Math.PI * 2);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(8, 0);
    ctx.lineTo(8, 16);
    ctx.stroke();
    ctx.beginPath();
    ctx.moveTo(0, 8);
    ctx.lineTo(16, 8);
    ctx.stroke();
    return c.toDataURL('image/png', 1.0);
  };

  (function() {
    var cd, child, div, e, firstClick, goodWidth, id, input, p, _i, _j, _k, _len, _len1, _len2, _ref1, _ref2, _ref3, _results;
    makeInputs();
    div = byId('tab-div');
    while (div = div.nextSibling) {
      if (div.nodeType === 1) {
        tabs.push(div);
      }
    }
    child = byId('tabs').firstChild;
    while (child = child.nextSibling) {
      if (child.nodeType === 1 && child.className !== 'buffer') {
        sibs.push(child);
        if (child.classList.contains('reg')) {
          regTabs[child.innerHTML] = true;
        }
        if (child.innerHTML === 'about') {
          firstClick = child;
        }
        child.onclick = (function(c) {
          return function() {
            return tabClicked(c);
          };
        })(child);
        cd = byId("" + child.innerHTML + "-chart");
        if (cd) {
          p = create('p', 'wait');
          p.appendChild(text('Charts will appear here when the simulation starts provided Google charts can be loaded.'));
          if (cd.firstChild) {
            cd.insertBefore(p, cd.firstChild);
          } else {
            cd.appendChild(p);
          }
        }
      }
    }
    firstClick.click();
    goodWidth = byId('tabs').clientWidth;
    _ref1 = byClass('table-y');
    for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
      e = _ref1[_i];
      e.style['max-width'] = goodWidth;
    }
    tryLoad(false);
    makeUniverse();
    onEvent('click', byId('clear-cursor'), function(e) {
      document.body.style.cursor = 'auto';
      return onEvent('click', byId('universe'), (function() {}), true);
    });
    onEvent('click', byId('highlight'), function(e) {
      document.body.style.cursor = 'crosshair';
      return onEvent('click', byId('universe'), function(e) {
        return u.highlight(e.offsetX, e.offsetY, byId('highlight').value, byId('inherit-mark').checked);
      }, true);
    });
    onEvent('click', byId('stop'), stop);
    onEvent('click', byId('start'), start);
    onEvent('click', byId('clear'), clear);
    onEvent('click', byId('zap'), function(e) {
      var data;
      data = crosshairCursor();
      document.body.style.cursor = "url(" + data + "), auto";
      return onEvent('click', byId('universe'), function(e) {
        return u.zap(e.offsetX + 8, e.offsetY + 8);
      }, true);
    });
    onEvent('click', byId('outline'), function(e) {
      var data;
      data = crosshairCursor('red');
      document.body.style.cursor = "url(" + data + "), auto";
      return onEvent('click', byId('universe'), function(e) {
        return u.setTopic(e.offsetX + 8, e.offsetY + 8);
      }, true);
    });
    _ref2 = ['disease-virulence', 'disease-mortality', 'disease-cure', 'disease-health'];
    for (_j = 0, _len1 = _ref2.length; _j < _len1; _j++) {
      id = _ref2[_j];
      input = byId(id);
      input.nextSibling.innerHTML = input.value;
      onEvent('change', input, function(e) {
        return this.nextSibling.innerHTML = this.value;
      });
    }
    onEvent('click', byId('disease-wand'), function(e) {
      var data;
      data = crosshairCursor('green');
      document.body.style.cursor = "url(" + data + "), auto";
      return onEvent('click', byId('universe'), function(e) {
        var color, cureRate, healthDivisor, mortalityRate, virulence;
        mortalityRate = parseFloat(byId('disease-mortality').value);
        virulence = parseFloat(byId('disease-virulence').value);
        cureRate = parseFloat(byId('disease-cure').value);
        healthDivisor = parseFloat(byId('disease-health').value);
        color = byId('disease-color').value;
        return u.infect(e.offsetX + 8, e.offsetY + 8, virulence, mortalityRate, cureRate, healthDivisor, color);
      }, true);
    });
    _ref3 = byClass('adder');
    _results = [];
    for (_k = 0, _len2 = _ref3.length; _k < _len2; _k++) {
      e = _ref3[_k];
      _results.push((function(e) {
        var c, type, x, y, _l, _len3, _ref4;
        type = null;
        _ref4 = e.classList;
        for (_l = 0, _len3 = _ref4.length; _l < _len3; _l++) {
          c = _ref4[_l];
          if (c !== 'adder') {
            type = c;
          }
        }
        x = geometries[type][3];
        y = geometries[type][4];
        return onEvent('click', e, function(evt) {
          document.body.style.cursor = "url(" + e.src + "), auto";
          return onEvent('click', byId('universe'), function(e) {
            u.addInstance(type, e.offsetX + x, e.offsetY + y);
            if (!u.running) {
              return fiddled = true;
            }
          }, true);
        });
      })(e));
    }
    return _results;
  })();

}).call(this);
