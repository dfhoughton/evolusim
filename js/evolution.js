// Generated by CoffeeScript 1.8.0
(function() {
  var Animal, Carnivore, Cell, Disease, Herbivore, Organism, PI, Plant, QT, Stone, TAU, Thing, Universe, abs, acos, anglify, cos, degrees, div, dup, floor, grep, map, max, min, random, round, shuffle, sin, sqrt,
    __modulo = function(a, b) { return (+a % (b = +b) + b) % b; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  if (window.dfh == null) {
    window.dfh = {};
  }

  PI = Math.PI;

  QT = PI / 2;

  TAU = PI * 2;

  abs = Math.abs;

  acos = Math.acos;

  cos = Math.cos;

  floor = Math.floor;

  max = Math.max;

  min = Math.min;

  random = Math.random;

  round = Math.round;

  sin = Math.sin;

  sqrt = Math.sqrt;

  dfh.Universe = Universe = (function() {
    Universe.prototype.defaults = function() {
      return {
        torus: true,
        width: 500,
        height: 500,
        groundColor: '#ffffff',
        cell: 20,
        pause: 10,
        maxDistance: 60,
        maxBabyTries: 10,
        seedCost: 0.4,
        initialCreatures: {
          stones: {
            num: 40
          },
          plants: {
            num: 60
          },
          herbivores: {
            num: 8
          },
          carnivores: {
            num: 14
          }
        }
      };
    };

    function Universe(id, options) {
      var c, cellBuffer, column, createCreatures, dic, ic, o, paramsForType, uni, used, x, y, _i, _len;
      if (options == null) {
        options = {};
      }
      this.canvas = document.getElementById(id);
      if (!this.canvas) {
        throw "I have no canvas!";
      }
      this.ctx = this.canvas.getContext('2d');
      this.options = options;
      this.width = this.canvas.width;
      this.height = this.canvas.height;
      this.maxDim = max(this.width, this.height);
      this.maxDistance = options.maxDistance || round(max(this.width, this.height) / 3);
      this.torus = options.torus;
      this.maxBabyTries = options.maxBabyTries || this.defaults().maxBabyTries;
      if (this.torus == null) {
        this.torus = this.defaults().torus;
      }
      this.seedCost = options.seedCost || this.defaults().seedCost;
      this.cellWidth = options.cell || this.defaults().cell;
      this.cells = [];
      cellBuffer = [];
      x = 0;
      while (x <= this.width) {
        y = 0;
        this.cells.push(column = []);
        while (y <= this.height) {
          c = new Cell(this, x, y, this.cellWidth);
          for (_i = 0, _len = cellBuffer.length; _i < _len; _i++) {
            o = cellBuffer[_i];
            o.introduce(c);
          }
          cellBuffer.push(c);
          column.push(c);
          y += this.cellWidth;
        }
        x += this.cellWidth;
      }
      this.thingCount = 0;
      this.geoPool = [0];
      this.geoData = [null];
      this.dotCache = {};
      this.idBase = 0;
      this.tick = 0;
      this.pause = options.pause || defaults().pause;
      this.callback = options.callback || function() {};
      dic = this.defaults().initialCreatures;
      ic = this.options.initialCreatures || dic;
      uni = this;
      used = {};
      this.geo = {
        data: (function(_this) {
          return function() {
            var i, offset, _j;
            if (_this.geoPool.length > 1) {
              offset = _this.geoPool.pop();
            } else {
              offset = _this.geoData.length;
              for (i = _j = 1; _j <= 4; i = ++_j) {
                _this.geoData.push(null);
              }
            }
            return offset;
          };
        })(this),
        free: (function(_this) {
          return function(offset) {
            return _this.geoPool.push(offset);
          };
        })(this),
        calc: (function(_this) {
          return function(offset, x, y, maxDistance, distance) {
            var cosine, gd, segment, sine, tooFar;
            if (distance != null) {
              sine = x;
              cosine = y;
            } else {
              if (!(tooFar = abs(x) > maxDistance || abs(y) > maxDistance)) {
                distance = sqrt(x * x + y * y);
                if (!(tooFar || (tooFar = distance > maxDistance))) {
                  sine = y / distance;
                  cosine = x / distance;
                }
              }
            }
            if (!tooFar) {
              segment = sine === 0 ? cosine === 1 ? 0 : 4 : sine === 1 ? 2 : sine === -1 ? 6 : sine > 0 ? cosine > 0 ? 1 : 3 : cosine > 0 ? 7 : 5;
            }
            if (tooFar) {
              _this.geoPool.push(offset);
              return 0;
            } else {
              gd = _this.geoData;
              gd[offset] = distance;
              gd[offset + 1] = sine;
              gd[offset + 2] = cosine;
              gd[offset + 3] = floor(segment / 2);
              return offset;
            }
          };
        })(this),
        vector: (function(_this) {
          return function(offset, magnitude) {
            return [_this.geoData[offset + 2] * magnitude, _this.geoData[offset + 1] * magnitude];
          };
        })(this),
        opposite: (function(_this) {
          return function(offset) {
            var gd, op;
            if (!offset) {
              return offset;
            }
            op = _this.geo.data();
            gd = _this.geoData;
            gd[op] = gd[offset];
            gd[op + 1] = -gd[offset + 1];
            gd[op + 2] = -gd[offset + 2];
            gd[op + 3] = (gd[offset + 3] + 2) % 4;
            return op;
          };
        })(this)
      };
      paramsForType = function(type, dontAdd) {
        var params;
        params = dup(ic[type] || {})['init'] || {};
        params.universe = uni;
        params.dontAdd = dontAdd;
        return params;
      };
      createCreatures = function(Cons, type) {
        var cons, i, lim, _j, _results;
        cons = function() {
          return new Cons(uni.randomLocation(used), paramsForType(type));
        };
        lim = ic[type] && ic[type].num;
        if (lim == null) {
          lim = dic[type].num;
        }
        if (lim) {
          _results = [];
          for (i = _j = 1; 1 <= lim ? _j <= lim : _j >= lim; i = 1 <= lim ? ++_j : --_j) {
            _results.push(cons());
          }
          return _results;
        }
      };
      createCreatures(Stone, 'stones');
      createCreatures(Plant, 'plants');
      createCreatures(Herbivore, 'herbivores');
      createCreatures(Carnivore, 'carnivores');
      this.seeds = {
        stone: new Stone([0, 0], paramsForType('stones', true)),
        plant: new Plant([0, 0], paramsForType('plants', true)),
        herbivore: new Herbivore([0, 0], paramsForType('herbivores', true)),
        carnivore: new Carnivore([0, 0], paramsForType('carnivores', true))
      };
      this.topic = null;
      this.outline = 'yellow';
      this.mxd = this.fiddled = this.change = this.running = this.started = this.goTime = this.done = this.dead = this.timer = null;
      this.erase();
    }

    Universe.prototype.imageFor = function(type) {
      var c, height, instance, oldAngle, oldContext, oldX, oldY, width, x, y, _ref;
      if (instance = this.seeds[type]) {
        _ref = instance.geometry(), width = _ref[0], height = _ref[1], x = _ref[2], y = _ref[3];
        c = document.createElement('canvas');
        c.setAttribute('width', width);
        c.setAttribute('height', height);
        oldX = instance.x;
        oldY = instance.y;
        oldContext = instance.context;
        oldAngle = instance.angle;
        instance.x = x;
        instance.y = y;
        instance.context = c.getContext('2d');
        instance.angle = PI * 1.5;
        instance.draw();
        instance.x = oldX;
        instance.y = oldY;
        instance.context = oldContext;
        instance.angle = oldAngle;
        return [c.toDataURL('image/png', 1.0), width, height, x, y];
      }
    };

    Universe.prototype.maxRadius = function() {
      var mx, o, t, _ref;
      if (this.mxr != null) {
        return this.mxr;
      }
      mx = 0;
      _ref = this.seeds;
      for (t in _ref) {
        o = _ref[t];
        if (o.radius > mx) {
          mx = o.radius;
        }
      }
      return this.mxr = mx;
    };

    Universe.prototype.maxDimensions = function() {
      var h, height, o, t, w, width, _ref, _ref1;
      if (this.mxd != null) {
        return this.mxd;
      }
      h = w = 0;
      _ref = this.seeds;
      for (t in _ref) {
        o = _ref[t];
        _ref1 = o.geometry(), width = _ref1[0], height = _ref1[1];
        if (width > w) {
          w = width;
        }
        if (height > h) {
          h = height;
        }
      }
      return this.mxd = [w, h];
    };

    Universe.prototype.visitThings = function(f, returns, safe) {
      var ar, cell, column, ret, t, v, _i, _j, _k, _len, _len1, _len2, _ref;
      if (returns) {
        ret = [];
      }
      _ref = this.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        for (_j = 0, _len1 = column.length; _j < _len1; _j++) {
          cell = column[_j];
          if (cell.inhabitants.length) {
            ar = safe ? cell.inhabitants : [].concat(cell.inhabitants);
            for (_k = 0, _len2 = ar.length; _k < _len2; _k++) {
              t = ar[_k];
              v = f(t);
              if (returns) {
                ret.push(v);
              }
            }
          }
        }
      }
      return ret;
    };

    Universe.prototype.clearThings = function() {
      this.visitThings((function(_this) {
        return function(t) {
          return _this.remThing(t);
        };
      })(this));
      return this.idBase = 0;
    };

    Universe.prototype.zap = function(x, y, f) {
      var changed, t, _i, _len, _ref;
      if (f == null) {
        f = (function() {
          return true;
        });
      }
      changed = false;
      _ref = this.thingsAt(x, y);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (!(f(t))) {
          continue;
        }
        t.dead = true;
        this.remThing(t);
        changed = true;
      }
      if (changed) {
        return setTimeout(((function(_this) {
          return function() {
            return _this.draw();
          };
        })(this)), 0);
      }
    };

    Universe.prototype.infect = function(x, y, virulence, mortalityRate, cureRate, factor, color, type) {
      var disease, t, _i, _len, _ref, _results;
      if (type == null) {
        type = Animal;
      }
      _ref = this.thingsAt(x, y);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (!(t instanceof Organism && t instanceof type)) {
          continue;
        }
        disease = new Disease(virulence, mortalityRate, cureRate, factor, color);
        t.sickness = {
          count: 0,
          disease: disease
        };
        _results.push(t.draw());
      }
      return _results;
    };

    Universe.prototype.setTopic = function(x, y) {
      var candidates, t;
      candidates = (function() {
        var _i, _len, _ref, _results;
        _ref = this.thingsAt(x, y);
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          t = _ref[_i];
          if (t instanceof Animal) {
            _results.push(t);
          }
        }
        return _results;
      }).call(this);
      if (candidates.length) {
        if (this.topic) {
          this.highlightTopic(false);
          this.topic.topicColor = null;
        }
        this.topic = candidates[0];
        this.topic.topicColor = this.outline;
        this.topic.inheritMark = false;
        return this.draw();
      }
    };

    Universe.prototype.highlight = function(x, y, color, inherit) {
      var t, _i, _len, _ref, _results;
      _ref = this.thingsAt(x, y);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (!(t instanceof Organism)) {
          continue;
        }
        t.mark = color;
        t.inheritMark = inherit;
        _results.push(t.draw());
      }
      return _results;
    };

    Universe.prototype.clearHighlights = function() {
      return this.visitThings(function(t) {
        if (t instanceof Organism) {
          return t.belly = 'white';
        }
      }, false, true);
    };

    Universe.prototype.thingsAt = function(x, y) {
      var ar, c, f, i, other, t, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;
      c = this.cellAt(x, y);
      ar = [];
      f = function(t) {
        var d;
        d = sqrt(Math.pow(t.x - x, 2) + Math.pow(t.y - y, 2));
        if (d < t.radius) {
          return ar.push([t, d]);
        }
      };
      _ref = c.inhabitants;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        f(t);
      }
      _ref1 = c.neighbors;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        other = _ref1[_j];
        if (other[1] <= this.maxRadius()) {
          _ref2 = other[0].inhabitants;
          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
            t = _ref2[_k];
            f(t);
          }
        }
      }
      _ref3 = ar.sort(function(a, b) {
        return a[1] - b[1];
      });
      _results = [];
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        i = _ref3[_l];
        _results.push(i[0]);
      }
      return _results;
    };

    Universe.prototype.cellAt = function(x, y) {
      var cell, column, w;
      if (!(x >= 0)) {
        x = 0;
      }
      if (!(y >= 0)) {
        y = 0;
      }
      w = this.cellWidth;
      while (!cell) {
        column = this.cells[div(x, w)];
        if (!column) {
          x--;
          continue;
        }
        cell = column[div(y, w)];
        y--;
      }
      return cell;
    };

    Universe.prototype.place = function(thing) {
      var cell;
      cell = this.cellAt(thing.x, thing.y);
      thing.cell = cell;
      return cell.inhabitants.push(thing);
    };

    Universe.prototype.urThing = function(type) {
      return this.seeds[type.toLowerCase()];
    };

    Universe.prototype.fiddledWith = function() {
      return this.fiddled;
    };

    Universe.prototype.addInstance = function(type, x, y) {
      var c;
      if (!(this.started || this.fiddled)) {
        this.fiddled = true;
        this.clearThings();
      }
      c = this.seeds[type].clone(x, y);
      return c.draw();
    };

    Universe.prototype.addThing = function(thing) {
      thing.id = this.idBase += 1;
      return this.place(thing);
    };

    Universe.prototype.remThing = function(thing) {
      var k, v, _i, _len, _ref, _ref1;
      thing.dead = true;
      this.change = true;
      if (thing === this.topic) {
        this.topic = null;
      }
      thing.cell.rem(thing);
      _ref = thing.marges || [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        v = _ref[_i];
        this.geoPool.push(v);
      }
      _ref1 = thing.others;
      for (k in _ref1) {
        v = _ref1[k];
        if (v) {
          this.geoPool.push(v);
        }
      }
      return this.visitThings((function(_this) {
        return function(t) {
          v = t.others[thing.id];
          if (v != null) {
            if (v) {
              _this.geoPool.push(v);
            }
            return delete t.others[thing.id];
          }
        };
      })(this), false, true);
    };

    Universe.prototype.moveThing = function(thing) {
      var h, t, theta, vx, vy, w, _ref, _results;
      _ref = thing.velocity, vx = _ref[0], vy = _ref[1];
      if (!(vx || vy)) {
        return;
      }
      this.change = true;
      thing.x += vx;
      thing.y += vy;
      t = this.torus;
      w = this.width;
      h = this.height;
      if (thing.x < 0) {
        if (t) {
          thing.x += w;
        } else {
          thing.x *= -1;
          vx = thing.velocity[0] *= -1;
        }
      } else if (thing.x > w) {
        if (t) {
          thing.x -= w;
        } else {
          thing.x -= thing.x - w;
          vx = thing.velocity[0] *= -1;
        }
      }
      if (thing.y < 0) {
        if (t) {
          thing.y += h;
        } else {
          thing.y *= -1;
          vy = thing.velocity[1] *= -1;
        }
      } else if (thing.y > h) {
        if (t) {
          thing.y -= h;
        } else {
          thing.y -= thing.y - h;
          vy = thing.velocity[1] *= -1;
        }
      }
      thing.cell.move(thing);
      if (thing.angle == null) {
        return;
      }
      theta = anglify(vx, vy);
      thing.angle = theta + thing.jitter();
      if (thing.marges) {
        if (thing.marges.length) {
          thing.marges.pop();
        }
        _results = [];
        while (thing.marges.length) {
          _results.push(this.geoPool.push(thing.marges.pop()));
        }
        return _results;
      }
    };

    Universe.prototype.randomLocation = function(used) {
      var h, randY, w, x, y, ys, _i, _j, _k, _l, _len, _len1, _ref, _results, _results1;
      h = this.height;
      w = this.width;
      randY = shuffle((function() {
        _results = [];
        for (var _i = 0; 0 <= h ? _i < h : _i > h; 0 <= h ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this));
      _ref = shuffle((function() {
        _results1 = [];
        for (var _k = 0; 0 <= w ? _k < w : _k > w; 0 <= w ? _k++ : _k--){ _results1.push(_k); }
        return _results1;
      }).apply(this));
      for (_j = 0, _len = _ref.length; _j < _len; _j++) {
        x = _ref[_j];
        ys = used[x] != null ? used[x] : used[x] = [];
        for (_l = 0, _len1 = randY.length; _l < _len1; _l++) {
          y = randY[_l];
          if (ys[y]) {
            continue;
          }
          ys[y] = true;
          return [x, y];
        }
      }
      throw 'Universe used up!';
    };

    Universe.prototype.run = function() {
      var self;
      self = this;
      this.running = this.started = true;
      return requestAnimationFrame(function() {
        return self.go();
      });
    };

    Universe.prototype.thingsCreated = function() {
      return this.idBase;
    };

    Universe.prototype.currentThings = function() {
      var count;
      count = 0;
      this.visitThings(function(t) {
        return count++;
      }, false, true);
      return count;
    };

    Universe.prototype.countThing = function(type) {
      var count;
      count = 0;
      this.visitThings(function(t) {
        if (t instanceof type) {
          return count++;
        }
      }, false, true);
      return count;
    };

    Universe.prototype.plantCount = function() {
      return this.countThing(Plant);
    };

    Universe.prototype.animalCount = function() {
      return this.countThing(Animal);
    };

    Universe.prototype.herbivoreCount = function() {
      return this.countThing(Herbivore);
    };

    Universe.prototype.carnivoreCount = function() {
      return this.countThing(Carnivore);
    };

    Universe.prototype.tp = function(x, y, maxDistance, distance) {
      var p;
      p = this.geo.data();
      return this.geo.calc(p, x, y, maxDistance, distance);
    };

    Universe.prototype.trig = function(t, o, x, y) {
      var base, height, oi, t1, t2, ti, tp;
      base = o.x - t.x + x;
      height = o.y - t.y + y;
      ti = t.id;
      oi = o.id;
      t1 = t.others[oi];
      if (t1) {
        this.geoPool.push(t1);
      }
      tp = this.tp(base, height, this.maxDistance);
      t.others[oi] = tp;
      if (o instanceof Animal) {
        t2 = o.others[ti];
        if (t2) {
          this.geoPool.push(t2);
        }
        o.others[ti] = this.geo.opposite(tp);
      }
      return tp;
    };

    Universe.prototype.near = function(thing, distance, angle, seen, candidates) {
      var d, d3, data, gd, id, keep, nearOnes, others, q1, q2, q3, qdr1, qdr2, qdr3, risingSine, sin1, sin2, sin3, t, t1, t2, tid, tp, _i, _j, _len, _len1, _ref;
      if (seen == null) {
        seen = {};
      }
      nearOnes = [];
      tid = thing.id;
      gd = this.geoData;
      others = thing.others;
      if (angle === 1) {
        for (_i = 0, _len = candidates.length; _i < _len; _i++) {
          t = candidates[_i];
          id = t.id;
          if (t.id === tid || seen[id]) {
            continue;
          }
          data = others[id];
          if (!data) {
            continue;
          }
          if (gd[data] <= distance) {
            seen[id] = true;
            nearOnes.push(t);
          }
        }
      } else {
        _ref = thing.margins(), t1 = _ref[0], t2 = _ref[1], d = _ref[2];
        sin1 = gd[t1 + 1];
        qdr1 = gd[t1 + 3];
        sin2 = gd[t2 + 1];
        qdr2 = gd[t2 + 3];
        if (d) {
          q1 = 0;
          q2 = (qdr2 + d) % 4;
        } else {
          q1 = qdr1;
          q2 = qdr2;
        }
        for (_j = 0, _len1 = candidates.length; _j < _len1; _j++) {
          t = candidates[_j];
          id = t.id;
          if (id === tid || seen[id]) {
            continue;
          }
          tp = others[id];
          if (!tp) {
            continue;
          }
          d3 = gd[tp];
          if (!(d3 && d3 <= distance)) {
            continue;
          }
          qdr3 = gd[tp + 3];
          q3 = d ? (qdr3 + d) % 4 : qdr3;
          if ((q1 <= q3 && q3 <= q2)) {
            if ((q1 < q3 && q3 < q2)) {
              nearOnes.push(t);
            } else {
              sin3 = gd[tp + 1];
              risingSine = qdr3 === 0 || qdr3 === 3;
              keep = qdr1 === qdr2 ? risingSine ? (sin1 <= sin3 && sin3 <= sin2) : (sin1 >= sin3 && sin3 >= sin2) : qdr3 === qdr1 ? risingSine ? sin1 <= sin3 : sin1 >= sin3 : risingSine ? sin2 >= sin3 : sin2 <= sin3;
              if (keep) {
                nearOnes.push(t);
              }
            }
          }
        }
      }
      return nearOnes;
    };

    Universe.prototype.topLeftArc = function(radius) {
      var boundary, candidatePoint, test;
      boundary = [];
      candidatePoint = [0, -radius];
      test = function(pt) {
        var r, x, y;
        x = pt[0], y = pt[1];
        r = radius + y;
        return sqrt(x * x + r * r) <= radius;
      };
      if (test(candidatePoint)) {
        boundary.push([].concat(candidatePoint));
      }
      while ((candidatePoint[1] += 1) <= 0) {
        while (true) {
          candidatePoint[0] -= 1;
          if (!test(candidatePoint)) {
            candidatePoint[0] += 1;
            boundary.push([candidatePoint[0], candidatePoint[1]]);
            break;
          }
        }
      }
      return boundary;
    };

    Universe.prototype.dot = function(radius) {
      var _base;
      radius = round(radius);
      return (_base = this.dotCache)[radius] != null ? _base[radius] : _base[radius] = ((function(_this) {
        return function() {
          var boundary, cherry, i, p1, p2, points, row, y, _i, _j, _k, _len, _ref, _ref1, _ref2, _ref3;
          boundary = _this.topLeftArc(radius);
          points = [];
          if (boundary[0][0] === 0) {
            cherry = boundary.shift();
          }
          boundary = map(boundary, function(p) {
            return [p, [-p[0], p[1]]];
          });
          for (i = _i = _ref = boundary.length - 2; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
            _ref1 = boundary[i], p1 = _ref1[0], p2 = _ref1[1];
            y = -p1[1];
            boundary.push([[p1[0], y], [p2[0], y]]);
          }
          for (_j = 0, _len = boundary.length; _j < _len; _j++) {
            row = boundary[_j];
            p1 = row[0], p2 = row[1];
            points.push(p1);
            for (i = _k = _ref2 = p1[0] + 1, _ref3 = p2[0]; _ref2 <= _ref3 ? _k < _ref3 : _k > _ref3; i = _ref2 <= _ref3 ? ++_k : --_k) {
              points.push([i, p1[1]]);
            }
            points.push(p2);
          }
          if (cherry) {
            points.unshift(cherry);
            points.push([0, radius]);
          }
          return points;
        };
      })(this))();
    };

    Universe.prototype.pointsNear = function(x, y, radius) {
      var h, points, w;
      x = round(x);
      y = round(y);
      points = map(this.dot(radius), function(p) {
        return [p[0] + x, p[1] + y];
      });
      w = this.width;
      h = this.height;
      if (x - radius < 0 || x + radius >= w || y - radius < 0 || y + radius >= h) {
        if (this.torus) {
          return map(points, function(p) {
            return [__modulo(p[0], w), __modulo(p[1], h)];
          });
        } else {
          return grep(points, function(p) {
            var _ref, _ref1;
            return (0 <= (_ref = p[0]) && _ref < w) && (0 <= (_ref1 = p[1]) && _ref1 < h);
          });
        }
      } else {
        return points;
      }
    };

    Universe.prototype.go = function() {
      var self;
      this.goTime = new Date();
      if (this.timer == null) {
        this.timer = this.goTime;
      }
      this.change = false;
      this.tick += 1;
      this.visitThings(function(t) {
        return t.clean();
      }, false, true);
      this.move();
      self = this;
      return setTimeout(function() {
        self.die();
        return setTimeout(function() {
          self.cure();
          return setTimeout(function() {
            self.babies();
            self.done = self.dead || !self.change;
            return requestAnimationFrame(function() {
              self.draw();
              return setTimeout(function() {
                var pause;
                self.callback(self);
                if (self.running && !self.done) {
                  pause = self.pause - new Date().getTime() + self.goTime.getTime();
                  if (pause < 0) {
                    pause = 0;
                  }
                  return setTimeout(function() {
                    return self.go();
                  }, pause);
                }
              }, 0);
            });
          }, 0);
        }, 0);
      }, 0);
    };

    Universe.prototype.prime = function() {
      return this.running = this.done = this.dead = false;
    };

    Universe.prototype.cure = function() {
      return this.visitThings(function(t) {
        if (t instanceof Organism) {
          return t.cure();
        }
      }, false, true);
    };

    Universe.prototype.die = function() {
      var mortal, other, t, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _m, _ref, _ref1, _ref2, _ref3;
      mortal = [];
      this.visitThings(function(t) {
        if (t.dead) {
          return;
        }
        if (t.type && t instanceof Organism) {
          return mortal.push(t);
        }
      });
      _ref = shuffle(mortal);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        switch (t.type) {
          case Herbivore:
            _ref1 = t.touching();
            for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
              other = _ref1[_j];
              if (t.full()) {
                break;
              }
              if (other instanceof Plant) {
                t.eat(other);
              }
            }
            break;
          case Carnivore:
            _ref2 = t.touching();
            for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
              other = _ref2[_k];
              if (t.full()) {
                break;
              }
              if (other instanceof Herbivore) {
                t.eat(other);
              }
            }
        }
        if (t instanceof Animal && t.hp <= 0 || t.succumbs()) {
          this.remThing(t);
        } else if (t.isSick()) {
          _ref3 = t.touching();
          for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
            other = _ref3[_l];
            if ((other.type != null) && other.type === t.type) {
              t.expose(other);
            }
          }
        }
      }
      this.dead = true;
      for (_m = 0, _len4 = mortal.length; _m < _len4; _m++) {
        t = mortal[_m];
        if (!t.dead) {
          this.dead = false;
          break;
        }
      }
      return this.dead;
    };

    Universe.prototype.highlightTopic = function(turnOn) {
      var color, other, others, _i, _j, _len, _len1, _results, _results1;
      if (turnOn == null) {
        turnOn = true;
      }
      if (this.topic) {
        others = this.topic.nearby();
        if (turnOn) {
          color = this.outline || 'yellow';
          _results = [];
          for (_i = 0, _len = others.length; _i < _len; _i++) {
            other = others[_i];
            _results.push(other.outline(color));
          }
          return _results;
        } else {
          _results1 = [];
          for (_j = 0, _len1 = others.length; _j < _len1; _j++) {
            other = others[_j];
            _results1.push(other.outlined = false);
          }
          return _results1;
        }
      }
    };

    Universe.prototype.draw = function() {
      var type, _i, _len, _ref;
      this.erase();
      this.highlightTopic();
      _ref = [Stone, Plant, Herbivore, Carnivore];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        type = _ref[_i];
        this.visitThings(function(t) {
          if (t instanceof type) {
            return t.draw();
          }
        }, false, true);
      }
      if (this.topic) {
        return this.topic.draw();
      }
    };

    Universe.prototype.move = function() {
      this.visitThings(function(t) {
        return t.react();
      });
      this.visitThings((function(_this) {
        return function(t) {
          if (t instanceof Animal) {
            return _this.moveThing(t);
          }
        };
      })(this));
      return true;
    };

    Universe.prototype.makeCradles = function() {
      var column, _i, _j, _ref, _ref1, _results, _results1;
      column = map((function() {
        _results = [];
        for (var _i = 0, _ref = this.height; 0 <= _ref ? _i < _ref : _i > _ref; 0 <= _ref ? _i++ : _i--){ _results.push(_i); }
        return _results;
      }).apply(this), function() {
        return true;
      });
      return map((function() {
        _results1 = [];
        for (var _j = 0, _ref1 = this.width; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; 0 <= _ref1 ? _j++ : _j--){ _results1.push(_j); }
        return _results1;
      }).apply(this), function() {
        return [].concat(column);
      });
    };

    Universe.prototype.babies = function() {
      var c, cradles, orchards, organisms, t, _i, _len, _ref, _results;
      cradles = this.makeCradles();
      orchards = this.makeCradles();
      organisms = [];
      this.visitThings((function(_this) {
        return function(t) {
          var points;
          points = _this.pointsNear(t.x, t.y, t.radius * 2);
          if (t instanceof Organism) {
            organisms.push(t);
          }
          if (!(t instanceof Plant)) {
            _this.removeCradles(cradles, points);
          }
          if (!(t instanceof Stone)) {
            return _this.removeCradles(orchards, points);
          }
        };
      })(this), false, true);
      _ref = shuffle(organisms);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        c = t instanceof Plant ? orchards : cradles;
        _results.push(t.reproduce(c));
      }
      return _results;
    };

    Universe.prototype.findCradles = function(allCradles, newCradles) {
      return grep(newCradles, function(pt) {
        return allCradles[pt[0]][pt[1]];
      });
    };

    Universe.prototype.removeCradles = function(allCradles, points) {
      var col, pt, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = points.length; _i < _len; _i++) {
        pt = points[_i];
        col = allCradles[pt[0]];
        if (col) {
          _results.push(col[pt[1]] = false);
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Universe.prototype.stop = function() {
      return this.running = false;
    };

    Universe.prototype.start = function() {
      if (!this.running) {
        return this.run();
      }
    };

    Universe.prototype.erase = function() {
      if (this.options.erase) {
        return this.options.erase();
      } else {
        this.ctx.fillStyle = this.options.groundColor;
        return this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
      }
    };

    Universe.prototype.describe = function() {
      return this.visitThings(function(t) {
        return t.describe();
      }, true, true);
    };

    Universe.prototype.time = function(obj, name, time) {
      var now;
      now = new Date();
      obj[name] = now.getTime() - time.getTime();
      return now;
    };

    Universe.prototype.reportDelta = function(name) {
      var delta, now;
      now = new Date();
      delta = now.getTime() - this.timer.getTime();
      this.timer = now;
      return console.log(name, delta);
    };

    Universe.prototype.countTypes = function() {
      var all, c, counts, names, t;
      counts = {};
      names = {};
      this.visitThings(function(t) {
        var n, _name;
        n = names[_name = t.type] != null ? names[_name] : names[_name] = t.typeName();
        if (counts[n] == null) {
          counts[n] = 0;
        }
        return counts[n] += 1;
      }, false, true);
      all = ((function() {
        var _results;
        _results = [];
        for (t in counts) {
          c = counts[t];
          _results.push("" + t + ": " + c);
        }
        return _results;
      })()).sort().join(', ');
      return console.log(all);
    };

    Universe.prototype.getType = function(type) {
      if (typeof type !== 'string') {
        return type;
      }
      switch (type) {
        case 'Thing':
          return Thing;
        case 'Stone':
          return Stone;
        case 'Organism':
          return Organism;
        case 'Plant':
          return Plant;
        case 'Animal':
          return Animal;
        case 'Herbivore':
          return Herbivore;
        case 'Carnivore':
          return Carnivore;
      }
    };

    Universe.prototype.getThings = function(type) {
      var ret;
      type = this.getType(type);
      ret = [];
      return this.visitThings(function(t) {
        if (t instanceof type) {
          return ret.push(t);
        }
      }, false, true);
    };

    Universe.prototype.pickThing = function(type) {
      var rightThings;
      type = this.getType(type);
      rightThings = this.getThings(type);
      return rightThings[~~(random() * rightThings.length)];
    };

    return Universe;

  })();

  anglify = function(x, y) {
    var a, h, theta;
    a = abs(x);
    h = sqrt(x * x + y * y);
    theta = acos(a / h);
    if (x < 0) {
      if (y < 0) {
        return PI + theta;
      } else {
        return PI - theta;
      }
    } else {
      if (y < 0) {
        return 2 * PI - theta;
      } else {
        return theta;
      }
    }
  };

  grep = function(ar, f) {
    var x, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = ar.length; _i < _len; _i++) {
      x = ar[_i];
      if (f(x)) {
        _results.push(x);
      }
    }
    return _results;
  };

  map = function(ar, f) {
    var x, _i, _len, _results;
    _results = [];
    for (_i = 0, _len = ar.length; _i < _len; _i++) {
      x = ar[_i];
      _results.push(f(x));
    }
    return _results;
  };

  dup = function(obj) {
    var copy, k, v;
    if (obj == null) {
      return null;
    }
    if (obj instanceof Array) {
      return map(obj, function(o) {
        return dup(o);
      });
    } else if (typeof obj === 'object') {
      copy = {};
      for (k in obj) {
        v = obj[k];
        copy[k] = dup(v);
      }
      return copy;
    } else {
      return obj;
    }
  };

  degrees = function(radians) {
    return 360 * radians / TAU;
  };

  div = function(n, d) {
    return floor(n / d);
  };

  shuffle = function(ar, dup) {
    var i, j, t;
    if (dup == null) {
      dup = false;
    }
    if (!ar.length) {
      if (dup) {
        return [];
      }
      return ar;
    }
    if (dup) {
      ar = [].concat(ar);
    }
    i = ar.length;
    while (--i) {
      j = ~~(random() * (i + 1));
      t = ar[i];
      ar[i] = ar[j];
      ar[j] = t;
    }
    return ar;
  };

  Cell = (function() {
    function Cell(universe, x, y, width) {
      this.universe = universe;
      this.x = x;
      this.y = y;
      this.farX = min(x + width, universe.width);
      this.farY = min(y + width, universe.height);
      this.width = width;
      this.neighbors = [];
      this.inhabitants = [];
    }

    Cell.prototype.has = function(thing) {
      var _ref, _ref1;
      return (this.x <= (_ref = thing.x) && _ref < this.farX) && (this.y <= (_ref1 = thing.y) && _ref1 < this.farY);
    };

    Cell.prototype.move = function(thing) {
      if (!this.has(thing)) {
        this.rem(thing);
        return this.universe.place(thing);
      }
    };

    Cell.prototype.rem = function(thing) {
      var i, t, _i, _len, _ref, _results;
      _ref = this.inhabitants;
      _results = [];
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        t = _ref[i];
        if (t === thing) {
          this.inhabitants.splice(i, 1);
          break;
        } else {
          _results.push(void 0);
        }
      }
      return _results;
    };

    Cell.prototype.distance = function(other) {
      var h, t, w, wx, wy, x, x1, x2, y, y1, y2;
      t = this.universe.torus;
      w = this.universe.width;
      h = this.universe.height;
      wx = 0;
      wy = 0;
      if (this.x < other.x) {
        if (t) {
          if (other.x - this.farX > w / 2) {
            x1 = this.x;
            x2 = other.farX - w;
            wx = -w;
          } else {
            x1 = this.farX;
            x2 = other.x;
          }
        } else {
          x1 = this.farX;
          x2 = other.x;
        }
      } else if (this.x > other.x) {
        if (t) {
          if (this.x - other.farX > w / 2) {
            x1 = this.farX;
            x2 = other.x + w;
            wx = w;
          } else {
            x1 = this.x;
            x2 = other.farX;
          }
        } else {
          x1 = this.x;
          x2 = other.farX;
        }
      } else {
        x1 = x2 = 0;
      }
      if (this.y < other.y) {
        if (t) {
          if (other.y - this.farY > h / 2) {
            y1 = this.y;
            y2 = other.farY - h;
            wy = -h;
          } else {
            y1 = this.farY;
            y2 = other.y;
          }
        } else {
          y1 = this.farY;
          y2 = other.y;
        }
      } else if (this.y > other.y) {
        if (t) {
          if (other.farY - this.y > h / 2) {
            y1 = this.farY;
            y2 = other.y + h;
            wy = h;
          } else {
            y1 = this.y;
            y2 = other.farY;
          }
        } else {
          y1 = this.y;
          y2 = other.farY;
        }
      } else {
        y1 = y2 = 0;
      }
      x = x1 - x2;
      y = y1 - y2;
      return [sqrt(x * x + y * y), wx, wy];
    };

    Cell.prototype.introduce = function(other, maxDistance) {
      var d, wx, wy, _ref;
      if (maxDistance == null) {
        maxDistance = this.universe.maxDistance;
      }
      _ref = this.distance(other), d = _ref[0], wx = _ref[1], wy = _ref[2];
      if (d <= maxDistance) {
        this.neighbors.push([other, d, wx, wy]);
        return other.neighbors.push([this, d, -wx, -wy]);
      }
    };

    Cell.prototype.near = function(thing, distance) {
      var n, o, ret, t, wx, wy, _, _base, _base1, _i, _j, _k, _len, _len1, _len2, _name, _name1, _ref, _ref1, _ref2;
      if (distance == null) {
        distance = this.universe.maxDistance;
      }
      ret = [];
      _ref = this.inhabitants;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        if (!(t !== thing)) {
          continue;
        }
        ret.push(t);
        if ((_base = thing.others)[_name = t.id] == null) {
          _base[_name] = this.universe.trig(thing, t, 0, 0);
        }
      }
      _ref1 = this.neighbors;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        n = _ref1[_j];
        if (!(n[1] <= distance)) {
          continue;
        }
        o = n[0], _ = n[1], wx = n[2], wy = n[3];
        _ref2 = o.inhabitants;
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          t = _ref2[_k];
          ret.push(t);
          if ((_base1 = thing.others)[_name1 = t.id] == null) {
            _base1[_name1] = this.universe.trig(thing, t, wx, wy);
          }
        }
      }
      return ret;
    };

    Cell.prototype.drawRadius = function(radius, inhabitants) {
      var n, _i, _len, _ref;
      if (inhabitants == null) {
        inhabitants = true;
      }
      _ref = this.neighbors;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        n = _ref[_i];
        if (n[1] <= radius) {
          n[0].draw('grey', inhabitants);
        }
      }
      return this.draw('black');
    };

    Cell.prototype.draw = function(color, inhabitants) {
      if (color == null) {
        color = 'grey';
      }
      if (inhabitants == null) {
        inhabitants = true;
      }
      this.outline(color);
      if (inhabitants) {
        return this.showInhabitants();
      }
    };

    Cell.prototype.outline = function(color) {
      var ctx;
      if (color == null) {
        color = 'grey';
      }
      ctx = this.universe.ctx;
      ctx.rect(this.x, this.y, this.width, this.width);
      ctx.strokeStyle = color;
      return ctx.stroke();
    };

    Cell.prototype.showInhabitants = function() {
      var color, t, _i, _len, _ref, _results;
      color = this.universe.outline;
      _ref = this.inhabitants;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        t = _ref[_i];
        t.outline(color);
        _results.push(t.draw());
      }
      return _results;
    };

    return Cell;

  })();

  Thing = (function() {
    function Thing(location, options) {
      var uni;
      if (options == null) {
        options = {};
      }
      if (!options.universe) {
        throw "I need a universe!";
      }
      this.setAttributes(options);
      this.x = location[0], this.y = location[1];
      this.velocity = [0, 0];
      if (this.radius == null) {
        this.radius = 5;
      }
      this.type = Thing;
      this.others = {};
      this.outlined = false;
      this.marges = null;
      if (!this.dontAdd) {
        uni = this.universe;
        uni.change = true;
        uni.addThing(this);
      }
    }

    Thing.prototype.clone = function(x, y) {
      var c, k, type, v;
      type = this.universe.getType(this.typeName());
      c = new type([x, y], {
        universe: this.universe
      });
      for (k in this) {
        v = this[k];
        if (!/^(?:universe|dontAdd|others|angle|x|y)$/.test(k)) {
          c[k] = dup(v);
        }
      }
      if (this.angle != null) {
        c.angle = random() * TAU;
      }
      return c;
    };

    Thing.prototype.typeName = function() {
      var s;
      s = "" + this.type;
      s = s.substr(0, s.indexOf('('));
      return s.replace(/^.*?([A-Z]\w+).*/, '$1');
    };

    Thing.prototype.describe = function() {
      return {
        x: this.x,
        y: this.y,
        velocity: this.velocity,
        type: this.typeName()
      };
    };

    Thing.prototype.react = function() {};

    Thing.prototype.jitter = function() {
      return 0;
    };

    Thing.prototype.stationary = function() {
      return !(this.velocity[0] || this.velocity[1]);
    };

    Thing.prototype.move = function() {};

    Thing.prototype.ctx = function() {
      return this.context != null ? this.context : this.context = this.universe.ctx;
    };

    Thing.prototype.draw = function(color) {
      if (color == null) {
        color = this.bodyColor;
      }
      return this.drawBody(color);
    };

    Thing.prototype.outline = function(color) {
      return this.outlined = color;
    };

    Thing.prototype.drawBody = function(color) {
      if (color == null) {
        color = this.bodyColor;
      }
      if (this.outlined) {
        this.drawCircle(this.x, this.y, this.radius + 2, this.outlined);
        this.outlined = false;
      }
      return this.drawCircle(this.x, this.y, this.radius, color || 'black');
    };

    Thing.prototype.drag = function() {};

    Thing.prototype.drawCircle = function(x, y, radius, color) {
      return this.drawArc(x, y, radius, color, 0, TAU);
    };

    Thing.prototype.drawArc = function(x, y, radius, color, start, end) {
      var ctx;
      if (!(radius > 0)) {
        return;
      }
      ctx = this.ctx();
      ctx.beginPath();
      ctx.arc(x, y, radius, start, end);
      ctx.fillStyle = color;
      return ctx.fill();
    };

    Thing.prototype.setAttributes = function(options) {
      var key, value, _results;
      if (options == null) {
        options = {};
      }
      _results = [];
      for (key in options) {
        value = options[key];
        _results.push((function(_this) {
          return function() {
            return _this[key] = value;
          };
        })(this)());
      }
      return _results;
    };

    Thing.prototype.touching = function() {
      var candidates;
      candidates = this.cell.near(this, this.radius);
      return this.universe.near(this, this.radius, 1, {}, candidates);
    };

    Thing.prototype.margins = function() {
      var fi, gd, m, q1, q2, t1, t2;
      m = this.marges != null ? this.marges : this.marges = [];
      if (m.length) {
        return m;
      }
      fi = PI * this.visualAngle();
      gd = this.universe.geoData;
      t1 = this.angle - fi;
      t1 = this.universe.tp(sin(t1), cos(t1), null, true);
      q1 = gd[t1 + 3];
      t2 = this.angle + fi;
      t2 = this.universe.tp(sin(t2), cos(t2), null, true);
      q2 = gd[t2 + 3];
      m.push(t1);
      m.push(t2);
      m.push(q1 > q2 ? 4 - q1 : 0);
      return m;
    };

    Thing.prototype.clean = function() {
      var k, v, _ref, _results;
      _ref = this.others;
      for (k in _ref) {
        v = _ref[k];
        if (v) {
          this.universe.geoPool.push(v);
        }
        delete this.others[k];
      }
      if (this.marges) {
        _results = [];
        while (this.marges.length) {
          _results.push(this.universe.geoPool.push(this.marges.pop()));
        }
        return _results;
      }
    };

    Thing.prototype.healthRatio = function() {
      return 1;
    };

    Thing.prototype.geometry = function() {
      var width;
      width = 2 * this.radius;
      return [width, width, this.radius, this.radius];
    };

    Thing.prototype.dist = function(t) {
      var x, y;
      x = this.x - t.x;
      y = this.y - t.y;
      return sqrt(x * x + y * y);
    };

    Thing.prototype.absAngle = function(t) {
      var isAbove, isBefore, theta;
      isAbove = this.y < t.y;
      isBefore = this.x < t.x;
      if (this.x === t.x) {
        if (isAbove) {
          return QT;
        } else {
          return 3 * QT;
        }
      }
      if (this.y === t.y) {
        if (isBefore) {
          return 0;
        } else {
          return PI;
        }
      }
      theta = degrees(acos(abs(this.x - t.x) / this.dist(t)));
      if (isAbove) {
        if (isBefore) {
          return theta;
        } else {
          return 180 - theta;
        }
      } else {
        if (isBefore) {
          return 360 - theta;
        } else {
          return 180 + theta;
        }
      }
    };

    Thing.prototype.relativeGeometry = function(t) {
      var offset;
      offset = this.others[t.id];
      if (offset) {
        return {
          distance: this.universe.geoData[offset],
          sine: this.universe.geoData[offset + 1],
          cosine: this.universe.geoData[offset + 2],
          quadrant: this.universe.geoData[offset + 3]
        };
      } else {
        return 'beyond maximum distance considered';
      }
    };

    return Thing;

  })();

  Stone = (function(_super) {
    __extends(Stone, _super);

    function Stone(location, options) {
      if (options == null) {
        options = {};
      }
      Stone.__super__.constructor.call(this, location, options);
      if (this.bodyColor == null) {
        this.bodyColor = 'grey';
      }
      this.radius = options.radius || 8;
      this.type = Stone;
    }

    Stone.prototype.drag = function() {
      return 0;
    };

    return Stone;

  })(Thing);

  Organism = (function(_super) {
    __extends(Organism, _super);

    function Organism(location, options) {
      if (options == null) {
        options = {};
      }
      Organism.__super__.constructor.call(this, location, options);
      if (this.genes == null) {
        this.genes = this.defaultGenes();
      }
      if (this.hp == null) {
        this.hp = this.health() / 2;
      }
      if (this.generation == null) {
        this.generation = 1;
      }
      if (this.radius == null) {
        this.radius = 5;
      }
      this.tick = this.universe.tick;
      this.babies = 0;
      if (this.mark == null) {
        this.mark = null;
      }
      if (this.belly == null) {
        this.belly = 'white';
      }
      this.hr = this.sickness = this.topicColor = null;
      if (this.maxTries == null) {
        this.maxTries = this.universe.maxBabyTries;
      }
    }

    Organism.prototype.describe = function() {
      var description, genes, k, v, _ref;
      description = Organism.__super__.describe.call(this);
      description.health = this.health();
      description.hp = this.hp;
      description.tick = this.tick;
      description.babies = this.babies;
      genes = description.genes = {};
      _ref = this.genes;
      for (k in _ref) {
        v = _ref[k];
        v = v[0];
        v = typeof v === 'function' ? v(this) : v;
        genes[k] = v;
      }
      return description;
    };

    Organism.prototype.defaultGenes = function() {
      return {
        health: [
          10, 5, function(t) {
            return 2 * t.health();
          }
        ],
        babyCost: [
          1, 1, function(t) {
            return t.health() / 2;
          }
        ],
        babyThreshold: [.5, .1, .9],
        babyTries: [
          2, 1, function(t) {
            return min(t.maxTries, t.babyTries() * 2);
          }
        ],
        mutationRate: [.1, 0.01, 1],
        mutationRange: [.1, 0.01, 1]
      };
    };

    Organism.prototype.dispersalRadius = function() {
      return 2.5 * this.radius;
    };

    Organism.prototype.mergeGenes = function(base, ext) {
      var genes, k, v;
      genes = {};
      for (k in base) {
        v = base[k];
        genes[k] = v;
      }
      for (k in ext) {
        v = ext[k];
        genes[k] = v;
      }
      return genes;
    };

    Organism.prototype.draw = function(color) {
      if (color == null) {
        color = this.bodyColor;
      }
      Organism.__super__.draw.call(this, color);
      return this.drawHunger();
    };

    Organism.prototype.drawHunger = function() {
      var color, h, r;
      h = this.health();
      r = (this.radius - 1) * (h - this.hp) / h;
      color = this.topicColor || this.mark || this.belly;
      this.drawCircle(this.x, this.y, r, color);
      if (this.sickness != null) {
        return this.drawCircle(this.x, this.y, 3 * r / 4, this.sickness.disease.color);
      }
    };

    Organism.prototype.health = function() {
      return this.genes.health[0];
    };

    Organism.prototype.need = function() {
      return 0;
    };

    Organism.prototype.gain = function() {
      return 0;
    };

    Organism.prototype.react = function() {
      var start;
      start = this.hp;
      this.hp += this.gain();
      this.hp -= this.need();
      this.hp = min(this.hp, this.health());
      if (start !== this.hp) {
        return this.universe.change = true;
      }
    };

    Organism.prototype.babyTries = function() {
      return this.genes.babyTries[0];
    };

    Organism.prototype.babyCost = function() {
      return this.genes.babyCost[0];
    };

    Organism.prototype.babyThreshold = function() {
      return this.genes.babyThreshold[0];
    };

    Organism.prototype.numBabies = function() {
      var denominator, numerator;
      numerator = this.hp - this.health() * this.babyThreshold();
      denominator = this.babyCost() + 1;
      return ~~(numerator / denominator);
    };

    Organism.prototype.mitosis = function() {
      var delta, genes, k, ma, mi, mn, mrange, mrate, mx, v, value, _ref;
      genes = {};
      mrate = this.genes.mutationRate[0];
      mrange = this.genes.mutationRange[0];
      _ref = this.genes;
      for (k in _ref) {
        v = _ref[k];
        value = v[0], mn = v[1], mx = v[2];
        if (random() <= mrate) {
          mi = typeof mn === 'function' ? mn(this) : mn;
          ma = typeof mx === 'function' ? mx(this) : mx;
          delta = random() * mrange * (ma - mi);
          if (random() > .5) {
            delta *= -1;
          }
          value += delta;
          value = max(mi, min(ma, value));
        }
        genes[k] = [value, mn, mx];
      }
      return genes;
    };

    Organism.prototype.babyPoint = function() {
      var angle, h, length, w, x, y;
      length = 2 * this.radius + random() * (this.dispersalRadius() - 2 * this.radius);
      angle = random() * TAU;
      x = round(this.x + length * cos(angle));
      y = round(this.y + length * sin(angle));
      w = this.universe.width;
      h = this.universe.height;
      if (this.universe.torus) {
        x = __modulo(x, w);
        y = __modulo(y, h);
      } else {
        if (x < 0) {
          x *= -1;
        } else if (x > w) {
          x = 2 * w - x;
        } else if (x === w) {
          x -= 1;
        }
        if (y < 0) {
          y *= -1;
        } else if (y > h) {
          y = 2 * h - y;
        } else {
          y -= 1;
        }
      }
      return [x, y];
    };

    Organism.prototype.reproduce = function(cradles) {
      var baby, column, genes, i, n, pt, _i, _results;
      if ((n = this.numBabies()) > 0) {
        _results = [];
        for (i = _i = 1; 1 <= n ? _i <= n : _i >= n; i = 1 <= n ? ++_i : --_i) {
          _results.push((function() {
            var _j, _ref, _results1;
            _results1 = [];
            for (i = _j = 1, _ref = this.babyTries(); 1 <= _ref ? _j <= _ref : _j >= _ref; i = 1 <= _ref ? ++_j : --_j) {
              if (this.hp < this.universe.seedCost) {
                break;
              }
              pt = this.babyPoint();
              column = cradles[pt[0]];
              this.hp -= this.universe.seedCost;
              if (column && column[pt[1]]) {
                this.hp -= this.babyCost();
                if (this.hp <= 0) {
                  break;
                }
                genes = this.mitosis();
                baby = new this.type(pt, {
                  universe: this.universe,
                  genes: genes,
                  hp: this.babyCost(),
                  radius: this.radius,
                  bodyColor: this.bodyColor,
                  inheritMark: this.inheritMark,
                  mark: this.inheritMark ? this.mark : null,
                  belly: this.inheritMark ? this.belly : null,
                  generation: this.generation + 1
                });
                this.babies += 1;
                this.universe.removeCradles(cradles, this.universe.pointsNear(baby.x, baby.y, baby.radius * 2));
                break;
              } else {
                _results1.push(void 0);
              }
            }
            return _results1;
          }).call(this));
        }
        return _results;
      }
    };

    Organism.prototype.clean = function() {
      Organism.__super__.clean.call(this);
      return this.hr = null;
    };

    Organism.prototype.healthRatio = function() {
      return this.hr != null ? this.hr : this.hr = this.hp / this.health();
    };

    Organism.prototype.succumbs = function() {
      if (this.sickness != null) {
        return this.sickness.disease.fatal(this, this.sickness.count++);
      }
    };

    Organism.prototype.isSick = function() {
      return (this.sickness != null) && this.sickness.count;
    };

    Organism.prototype.expose = function(other) {
      if (other.isSick()) {
        return false;
      }
      if (this.sickness.disease.catches(other)) {
        other.sickness = {
          count: 0,
          disease: this.sickness.disease.spread()
        };
        return this.universe.change = true;
      }
    };

    Organism.prototype.cure = function() {
      if (this.isSick() && this.sickness.disease.cures(this, this.sickness.count)) {
        this.sickness = null;
        return this.universe.change = true;
      }
    };

    return Organism;

  })(Thing);

  Plant = (function(_super) {
    __extends(Plant, _super);

    function Plant(location, options) {
      if (options == null) {
        options = {};
      }
      Plant.__super__.constructor.call(this, location, options);
      if (this.bodyColor == null) {
        this.bodyColor = 'green';
      }
      if (this.radius == null) {
        this.radius = 4;
      }
      this.type = Plant;
    }

    Plant.prototype.gain = function() {
      return .5;
    };

    Plant.prototype.defaultGenes = function() {
      return this.mergeGenes(Plant.__super__.defaultGenes.call(this), {
        dispersalRadius: [
          (function(_this) {
            return function() {
              return _this.radius * 15;
            };
          })(this), function(t) {
            return t.radius * 3;
          }, function(t) {
            return t.radius * 10;
          }
        ]
      });
    };

    Plant.prototype.dispersalRadius = function() {
      var dr;
      dr = this.genes.dispersalRadius[0];
      if (typeof dr === 'function') {
        dr = this.genes.dispersalRadius[0] = dr();
      }
      return dr;
    };

    return Plant;

  })(Organism);

  Animal = (function(_super) {
    __extends(Animal, _super);

    function Animal(location, options) {
      if (options == null) {
        options = {};
      }
      Animal.__super__.constructor.call(this, location, options);
      if (this.bodyColor == null) {
        this.bodyColor = 'brown';
      }
      if (this.radius == null) {
        this.radius = 5;
      }
      this.angle = random() * TAU;
      this.velocity = [0, 0];
      this.type = Animal;
      this.foodType = this.ma = this.maxSp = this.tailSize = this.earSize = this.eyeSize = null;
    }

    Animal.prototype.defaultGenes = function() {
      return this.mergeGenes(Animal.__super__.defaultGenes.call(this), {
        auditoryRange: [
          min(this.universe.maxDistance / 3, 20), 10, function(t) {
            return 2 * t.visualRange() / 3;
          }
        ],
        visualAngle: [.35, .1, .6],
        visualRange: [min(this.universe.maxDistance / 2, 30), 20, this.universe.maxDistance],
        g: [250, 1, 5000],
        jitter: [.05, 0.01, 1],
        kinAffinity: [
          -2, function(t) {
            return -max(.1, abs(t.kinAffinity()) * 2);
          }, function(t) {
            return max(.1, abs(t.kinAffinity()) * 2);
          }
        ],
        foodAffinity: [
          10, function(t) {
            return -max(.1, abs(t.foodAffinity()) * 2);
          }, function(t) {
            return max(.1, abs(t.foodAffinity()) * 2);
          }
        ],
        maxAcceleration: [
          (function(_this) {
            return function() {
              return _this.radius / 2;
            };
          })(this), function(t) {
            return t.radius / 4;
          }, function(t) {
            return t.maxSpeed() * 2;
          }
        ]
      });
    };

    Animal.prototype.need = function() {
      return 0.1;
    };

    Animal.prototype.full = function() {
      return this.hp === this.health();
    };

    Animal.prototype.eat = function(other) {
      this.hp += other.hp / 2;
      this.hp = min(this.health(), this.hp);
      return this.universe.remThing(other);
    };

    Animal.prototype.visualAngle = function() {
      return this.genes.visualAngle[0];
    };

    Animal.prototype.visualRange = function() {
      return this.genes.visualRange[0];
    };

    Animal.prototype.g = function() {
      return this.genes.g[0];
    };

    Animal.prototype.jitter = function() {
      return this.genes.jitter[0];
    };

    Animal.prototype.kinAffinity = function() {
      return this.genes.kinAffinity[0];
    };

    Animal.prototype.foodAffinity = function() {
      return this.genes.foodAffinity[0];
    };

    Animal.prototype.predatorAffinity = function() {
      return this.genes.predatorAffinity[0];
    };

    Animal.prototype.maxAcceleration = function() {
      if (this.ma != null) {
        return this.ma;
      }
      return this.ma = typeof this.genes.maxAcceleration[0] === 'function' ? this.genes.maxAcceleration[0] = this.genes.maxAcceleration[0]() : this.genes.maxAcceleration[0];
    };

    Animal.prototype.maxSpeed = function() {
      return this.maxSp != null ? this.maxSp : this.maxSp = this.radius * 1.5;
    };

    Animal.prototype.react = function() {
      var d, data, f, g, gd, geo, influence, m, ma, other, vx, vy, x, xa, y, ya, _i, _len, _ref, _ref1, _ref2;
      Animal.__super__.react.call(this);
      x = 0;
      y = 0;
      geo = this.universe.geo;
      g = this.g();
      gd = this.universe.geoData;
      _ref = this.nearby();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        other = _ref[_i];
        influence = this.affinity(other);
        if (influence) {
          data = this.others[other.id];
          d = gd[data];
          if (!d) {
            continue;
          }
          influence /= d * d;
          influence *= g;
          _ref1 = geo.vector(data, influence), xa = _ref1[0], ya = _ref1[1];
          x += xa;
          y += ya;
        }
      }
      if (x || y) {
        ma = this.maxAcceleration();
        m = sqrt(x * x + y * y);
        if (m > ma) {
          f = ma / m;
          x *= f;
          y *= f;
        }
        _ref2 = this.velocity, vx = _ref2[0], vy = _ref2[1];
        vx += x;
        vy += y;
        m = sqrt(vx * vx + vy * vy);
        if (m > this.maxSpeed()) {
          f = this.maxSpeed() / m;
          vx *= f;
          vy *= f;
        }
        return this.velocity = [vx, vy];
      }
    };

    Animal.prototype.auditoryRange = function() {
      return this.genes.auditoryRange[0];
    };

    Animal.prototype.nearby = function() {
      var ar, candidates, nearby, seen, vr;
      ar = this.auditoryRange();
      vr = this.visualRange();
      candidates = this.cell.near(this, max(vr, ar));
      seen = {};
      nearby = this.universe.near(this, ar, 1, seen, candidates);
      return nearby.concat(this.universe.near(this, vr, this.visualAngle(), seen, candidates));
    };

    Animal.prototype.reactToOther = function(other, data) {};

    Animal.prototype.prey = function(other) {
      return false;
    };

    Animal.prototype.geometry = function() {
      var height, width, x, y;
      if (this.tailSize == null) {
        this.tailSize = this.calcTailSize();
      }
      if (this.earSize == null) {
        this.earSize = this.calcEarSize();
      }
      if (this.eyeSize == null) {
        this.eyeSize = this.calcEyeSize();
      }
      width = 2 * (this.radius + this.earSize + 2);
      height = 2 * this.radius + this.tailSize + this.eyeSize + 2;
      x = 2 + this.radius + this.earSize;
      y = this.eyeSize / 2 + this.radius;
      return [width, height, x, y];
    };

    Animal.prototype.draw = function(color) {
      if (color == null) {
        color = this.bodyColor;
      }
      Animal.__super__.draw.call(this, color);
      this.drawHead(color);
      if (this.tailSize == null) {
        this.tailSize = this.calcTailSize();
      }
      return this.drawTail(color);
    };

    Animal.prototype.drawHead = function(color) {
      var inc;
      if (this.earSize == null) {
        this.earSize = this.calcEarSize();
      }
      this.drawEar(false, color);
      this.drawEar(true, color);
      inc = this.visualAngle() * QT;
      if (this.eyeSize == null) {
        this.eyeSize = this.calcEyeSize();
      }
      this.drawEye(inc);
      return this.drawEye(-inc);
    };

    Animal.prototype.drawEar = function(left, color) {
      var end, point, rad, start, x, y, _ref, _ref1;
      point = this.angle + (left ? -QT : QT);
      rad = this.earSize;
      _ref = left ? [this.angle, this.angle + PI] : [this.angle - PI, this.angle], start = _ref[0], end = _ref[1];
      _ref1 = this.edgePoint(point, rad + this.radius), x = _ref1[0], y = _ref1[1];
      return this.drawArc(x, y, rad, color, start, end);
    };

    Animal.prototype.calcTailSize = function() {
      var size;
      size = this.radius * this.maxAcceleration() / this.genes.maxAcceleration[2](this);
      return max(2, size);
    };

    Animal.prototype.calcEarSize = function() {
      var ratio, size;
      ratio = this.auditoryRange() / this.genes.auditoryRange[2](this);
      size = ratio * this.radius / 3;
      return max(size, 1);
    };

    Animal.prototype.calcEyeSize = function() {
      var ratio, size;
      ratio = this.visualRange() / this.genes.visualRange[2];
      size = ratio * this.radius / 4;
      return max(size, .75);
    };

    Animal.prototype.drawEye = function(inc) {
      var a, x, y, _ref;
      a = this.angle + inc;
      _ref = this.edgePoint(a), x = _ref[0], y = _ref[1];
      return this.drawCircle(x, y, this.eyeSize, 'black');
    };

    Animal.prototype.drawTail = function(color) {
      var a, c, x1, x2, y1, y2, _ref, _ref1;
      a = this.angle + PI;
      _ref = this.edgePoint(a), x1 = _ref[0], y1 = _ref[1];
      _ref1 = this.edgePoint(a, this.radius + this.tailSize), x2 = _ref1[0], y2 = _ref1[1];
      c = this.ctx();
      c.beginPath();
      c.moveTo(x1, y1);
      c.lineTo(x2, y2);
      c.lineWidth = 2;
      c.strokeStyle = color;
      c.lineCap = 'round';
      return c.stroke();
    };

    Animal.prototype.edgePoint = function(a, r) {
      var x, y;
      if (r == null) {
        r = this.radius;
      }
      x = this.x + r * cos(a);
      y = this.y + r * sin(a);
      return [x, y];
    };

    Animal.prototype.affinity = function(other) {
      var d;
      switch (other.type) {
        case this.type:
          return this.kinAffinity();
        case this.foodType:
          return this.foodAffinity() * other.healthRatio() / this.healthRatio();
        case Stone:
          d = this.universe.geoData[this.others[other.id]];
          if (d <= other.radius || d <= this.radius) {
            if (this._ma == null) {
              this._ma = this.maxSpeed() * 2;
            }
            return -20000;
          } else {
            return -20;
          }
          break;
        default:
          return 0;
      }
    };

    Animal.prototype.showSeen = function(color) {
      var candidates, seen, t, vr, _i, _len, _results;
      if (color == null) {
        color = 'black';
      }
      this.universe.draw();
      vr = this.visualRange();
      candidates = this.cell.near(this, vr);
      seen = this.universe.near(this, vr, this.visualAngle(), null, candidates);
      _results = [];
      for (_i = 0, _len = seen.length; _i < _len; _i++) {
        t = seen[_i];
        t.outline();
        _results.push(t.draw('black'));
      }
      return _results;
    };

    Animal.prototype.showHeard = function(color) {
      var ar, candidates, heard, t, _i, _len, _results;
      if (color == null) {
        color = 'purple';
      }
      this.universe.draw();
      ar = this.auditoryRange();
      candidates = this.cell.near(this, ar);
      heard = this.universe.near(this, ar, 1, null, candidates);
      _results = [];
      for (_i = 0, _len = heard.length; _i < _len; _i++) {
        t = heard[_i];
        t.outline();
        _results.push(t.draw(color));
      }
      return _results;
    };

    Animal.prototype.relativeGeometry = function(t) {
      var data, t1, t2, _ref;
      data = Animal.__super__.relativeGeometry.call(this, t);
      _ref = this.margins(), t1 = _ref[0], t2 = _ref[1];
      data.auditoryScope = this.auditoryRange();
      data.visualScope = {
        range: this.visualRange(),
        left: {
          sine: this.universe.geoData[t1 + 1],
          cosine: this.universe.geoData[t1 + 2],
          quadrant: this.universe.geoData[t1 + 3]
        },
        right: {
          sine: this.universe.geoData[t2 + 1],
          cosine: this.universe.geoData[t2 + 2],
          quadrant: this.universe.geoData[t2 + 3]
        }
      };
      return data;
    };

    return Animal;

  })(Organism);

  Herbivore = (function(_super) {
    __extends(Herbivore, _super);

    function Herbivore(location, options) {
      if (options == null) {
        options = {};
      }
      Herbivore.__super__.constructor.call(this, location, options);
      this.type = Herbivore;
      this.foodType = Plant;
    }

    Herbivore.prototype.defaultGenes = function() {
      return this.mergeGenes(Herbivore.__super__.defaultGenes.call(this), {
        predatorAffinity: [
          -4, function(t) {
            return -abs(max(1, t.predatorAffinity())) * 2;
          }, function(t) {
            return abs(max(1, t.predatorAffinity())) * 2;
          }
        ]
      });
    };

    Herbivore.prototype.affinity = function(other) {
      switch (other.type) {
        case Carnivore:
          return this.predatorAffinity();
        default:
          return Herbivore.__super__.affinity.call(this, other);
      }
    };

    return Herbivore;

  })(Animal);

  Carnivore = (function(_super) {
    __extends(Carnivore, _super);

    function Carnivore(location, options) {
      if (options == null) {
        options = {};
      }
      Carnivore.__super__.constructor.call(this, location, options);
      if (this.bodyColor == null) {
        this.bodyColor = 'red';
      }
      if (this.radius == null) {
        this.radius = 6;
      }
      this.type = Carnivore;
      this.foodType = Herbivore;
    }

    Carnivore.prototype.defaultGenes = function() {
      return this.mergeGenes(Carnivore.__super__.defaultGenes.call(this), {
        g: [500, 1, 5000],
        babyThreshold: [.4, .1, .9],
        plantAffinity: [
          .1, function(t) {
            return -abs(max(1, t.plantAffinity())) * 2;
          }, function(t) {
            return abs(max(1, t.plantAffinity())) * 2;
          }
        ]
      });
    };

    Carnivore.prototype.plantAffinity = function() {
      return this.genes.plantAffinity[0];
    };

    Carnivore.prototype.affinity = function(other) {
      switch (other.type) {
        case Plant:
          return this.plantAffinity();
        default:
          return Carnivore.__super__.affinity.call(this, other);
      }
    };

    return Carnivore;

  })(Animal);

  Disease = (function() {
    function Disease(virulence, mortalityRate, cureRate, healthFactor, color) {
      if (healthFactor == null) {
        healthFactor = 6;
      }
      if (color == null) {
        color = 'green';
      }
      this.virulence = virulence;
      this.mortalityRate = mortalityRate;
      this.cureRate = cureRate;
      this.color = color;
      this.healthFactor = healthFactor;
      this.initParams = [virulence, mortalityRate, cureRate];
    }

    Disease.prototype.fatal = function(organism, count) {
      var p;
      p = this.mortalityRate - organism.healthRatio() / this.healthFactor;
      return p > 0 && random() <= p;
    };

    Disease.prototype.catches = function(organism) {
      var p;
      p = this.virulence - organism.healthRatio() / this.healthFactor;
      return p > 0 && random() <= p;
    };

    Disease.prototype.spread = function() {
      return this;
    };

    Disease.prototype.cures = function(organism, count) {
      var p;
      p = this.cureRate + organism.healthRatio() / this.healthFactor;
      return p >= 1 || random() <= p;
    };

    return Disease;

  })();

}).call(this);
